enum BadgeStatus {
  Absent
  Requested
  Approved
  Challenged
  RequestRemoval
}

enum KlerosRequestType {
  Registration # Identifies a request to register an item to the registry.
  Clearing # Identifies a request to remove an item from the registry.
}

enum Controller {
  kleros
}

## - BADGE Model
type BadgeModel @entity {
  id: ID!
  uri: String!
  controllerType: String!
  validFor: BigInt!
  creatorFee: BigInt!
  protocolFeeInBps: BigInt!
  totalFeesGenerated: BigInt! ## The total amount of fees that users paid to mint this model
  paused: Boolean!
  creator: User!
  badgesMintedAmount: BigInt!
  createdAt: BigInt!
  badgeModelKleros: BadgeModelKlerosMetaData
  badgeModelThirdParty: BadgeModelThirdPartyMetaData
  contractAddress: Bytes!
  mintedBadges: [Badge!]! @derivedFrom(field: "badgeModel")
  version: BigInt!
  networkName: String! # The id of the network in which this badgeModel has been created
}

type BadgeModelKlerosMetaData @entity {
  id: ID!
  badgeModel: BadgeModel!
  registrationUri: String!
  removalUri: String!
  tcrList: Bytes!
  governor: Bytes!
  arbitrator: Bytes!
  admin: Bytes!
  submissionBaseDeposit: BigInt!
  challengePeriodDuration: BigInt!
}

type BadgeModelThirdPartyMetaData @entity {
  id: ID!
  badgeModel: BadgeModel!
  tcrList: Bytes!
  governor: Bytes!
  arbitrator: Bytes!
  admin: Bytes!
  submissionBaseDeposit: BigInt!
  challengePeriodDuration: BigInt!
}

## - BADGE

type Badge @entity {
  id: ID!
  badgeModel: BadgeModel!
  uri: String!
  account: User! # The receiver of the badge
  status: BadgeStatus!
  validUntil: BigInt!
  createdAt: BigInt!
  claimedAt: BigInt
  createdTxHash: Bytes!
  claimedTxHash: Bytes
  contractAddress: Bytes!
  badgeKlerosMetaData: BadgeKlerosMetaData @derivedFrom(field: "badge")
  badgeThirdPartyMetaData: BadgeThirdPartyMetaData @derivedFrom(field: "badge")
  networkName: String! # The id of the network in which this badgeModel has been created
}

## Equivalent to Kleros LItem
type BadgeKlerosMetaData @entity {
  id: ID! # the same as ID as the BADGE
  badge: Badge!
  tcrStatus: BadgeStatus!
  itemID: Bytes!
  reviewDueDate: BigInt! # The timestamp when the review period ends. if zero, it does not have review period
  "The total number of requests for this item."
  numberOfRequests: BigInt!
  requests: [KlerosBadgeRequest!]! @derivedFrom(field: "badgeKlerosMetaData")
}

## Equivalent to BadgeKlerosMetaData
type BadgeThirdPartyMetaData @entity {
  id: ID! # the same as ID as the BADGE
  badge: Badge!
  tcrStatus: BadgeStatus!
  itemID: Bytes!
}

type _KlerosBadgeIdToBadgeId @entity {
  id: ID! # itemID from kleros.
  badgeId: String! # badge id.
}

type _EvidenceGroupIDItemID @entity {
  id: ID!
  "Item submission ID, it can be a TCR random item or a badge submission request"
  itemID: String!
}

type _ItemIDToEvidenceGroupIDToBadgeID @entity {
  "Item submission ID, it can be a TCR random item or a badge submission request"
  id: ID!
  evidenceGroupID: String!
  badgeID: String
}

## - USER

type User @entity {
  id: ID!
  badges: [Badge!] @derivedFrom(field: "account") # TODO: check how to handle different types of badges
  # Note: this was enabled for optimization but it does not let us to query from the user to its badges, we need to make the property mandatory an empty
  createdBadgeModels: [BadgeModel!]! # @derivedFrom(field: "creator")
  # creator
  metadataUri: String
  isCompany: Boolean!
  isCreator: Boolean!
  suspended: Boolean!
  isCurator: Boolean!
  "User protocol statistics."
  statistics: UserStatistic! @derivedFrom(field: "user")
}

## Kleros Entities, source: https://github.com/kleros/gtcr-subgraph/blob/master/schema.graphql

enum Ruling {
  "The arbitrator did not rule or refused to rule."
  None
  "The arbitrator ruled in favor of the requester."
  Accept
  "The arbitrator in favor of the challenger."
  Reject
}

type Evidence @entity {
  "<Request.id>-<evidence number>"
  id: ID!
  "The URI of the evidence file."
  uri: String!
  "When was this evidence posted"
  timestamp: BigInt!
  "Who has send the evidence"
  sender: Bytes!
  "The latest request when this evidence was submitted."
  request: KlerosBadgeRequest
}

## Equivalent to Kleros LRequest
type KlerosBadgeRequest @entity {
  id: ID!
  type: KlerosRequestType!
  createdAt: BigInt!
  badgeKlerosMetaData: BadgeKlerosMetaData
  requestIndex: BigInt
  arbitrationParamsIndex: BigInt
  disputeID: BigInt
  requester: Bytes
  challenger: Bytes
  "Evidence provided regarding this request (matching evidenceGroupID)."
  evidences: [Evidence!]! @derivedFrom(field: "request")
  "Number of evidences."
  numberOfEvidences: BigInt!
  "The time the request was resolved."
  resolutionTime: BigInt!
  "Whether the item is currently disputed."
  disputed: Boolean!
  "True if the request was executed and/or any raised disputes were resolved."
  resolved: Boolean!
  "The hash of the transaction that solved this request."
  resolutionTx: Bytes
  "The outcome of the dispute, if any. Note that unsuccessful appeal fundings can invert the arbitrator ruling (so this may differ from the ruling given by the arbitrator)."
  disputeOutcome: Ruling!
  "The arbitrator's address."
  arbitrator: Bytes!
}

type ProtocolStatistic @entity {
  # Same as the contractAddress
  id: ID!
  badgeModelsCreatedAmount: BigInt!
  badgesMintedAmount: BigInt!
  badgesChallengedAmount: BigInt! #
  # The amount of DIFFERENT users that owns at least one badge
  badgesOwnersAmount: BigInt!
  badgeCreatorsAmount: BigInt!
  badgeCuratorsAmount: BigInt!
  registeredUsersAmount: BigInt!

  ## Fees statistics
  protocolEarnedFees: BigInt! # The total amount of fees earned by the protocol
  totalCreatorsFees: BigInt! # The total amount of fees earned by all the creators in the protocol
  # Keep track of the users that made at least one curation
  badgeCurators: [Bytes!]! #
  # Keep track of the users that registered as creators
  badgeCreators: [Bytes!]!
  # Keep track of the users that registered on the platform
  registeredUsers: [Bytes!]!

  protocolConfig: ProtocolConfig! @derivedFrom(field: "protocolStatistics")
}

type UserStatistic @entity {
  id: ID!
  user: User!

  # User statistics
  mintedBadgesAmount: BigInt! # Amount of badges minted by this user
  timeOfLastChallengeReceived: BigInt!
  challengesReceivedAmount: BigInt!
  challengesReceivedLostAmount: BigInt! # Challenges received LOST as badge user
  challengesReceivedWonAmount: BigInt! # Challenges received WON as badge user
  challengesReceivedRejectedAmount: BigInt! # Challenges received rejected to arbitrate as badge user
  # Creator statistics
  creatorStatistic: CreatorStatistic @derivedFrom(field: "userStatistic")

  # Curator statistics
  curatorStatistic: CuratorStatistic @derivedFrom(field: "userStatistic")
}

type CreatorStatistic @entity {
  # UserAddress
  id: ID!
  userStatistic: UserStatistic!

  # Creator statistics
  createdBadgeModelsAmount: BigInt! # Amount of badges created by this user
  createdBadgeModelsMintedAmount: BigInt! # Amounts of MINTS of other users to badges created by this user
  allTimeBadgeMinters: [Bytes!]! # Keep track of the users that made at least one mint
  allTimeBadgeMintersAmount: BigInt! # Amount of different USERS that minted at least one of the badges of this creator
  mostPopularCreatedBadge: BigInt! # The ID of the badge created by this user which has the max amount of mints by others users
  totalFeesEarned: BigInt! # The total amount of fees earned by owned badge models
}

type CuratorStatistic @entity {
  # UserAddress
  id: ID!
  userStatistic: UserStatistic!

  # Curator statistics
  challengesMadeAmount: BigInt! # Challenges made as curator
  challengesMadeLostAmount: BigInt! # Challenges made LOST as curator
  challengesMadeWonAmount: BigInt! # Challenges made WON as curator
  challengesMadeRejectedAmount: BigInt! # Challenges made rejected to arbitrate as curator
}

type ProtocolConfig @entity {
  # Same as the TB contractAddress
  id: ID!
  protocolStatistics: ProtocolStatistic!

  # Configured accounts
  contractAdmin: Bytes! # Address of the contract deployer
  feeCollector: Bytes! # Address of the account configured to collect the protocol fees
  # Configured fees
  registerUserProtocolFee: BigInt! # Configured protocol fees to pay in order to register as creator
  createBadgeModelProtocolFee: BigInt! # Configured protocol fees to pay in order to create a badge model
  mintBadgeProtocolDefaultFeeInBps: BigInt! # Configured protocol fees in BPS to pay in order to mint a badge model (default value, this will be different in each model)
  controllerConfigs: [ControllerConfig!]
    @derivedFrom(field: "generalProtocolConfig") #
}

type ControllerConfig @entity {
  # Same as the controller contractAddress
  id: ID!
  generalProtocolConfig: ProtocolConfig!
  controllerName: String!

  # Configured accounts
  contractAdmin: Bytes! # Address of the contract deployer
  arbitrator: Bytes # Address of the controller arbitrator (empty if not klerosController)
  tcrFactory: Bytes # Address of the factory that instanciastes the TCR lists (empty if not klerosController)
  # Configured fees
  verifyUserProtocolFee: BigInt!
}
